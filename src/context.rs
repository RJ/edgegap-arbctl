use edgegap::apis::configuration::*;

#[derive(Debug)]
pub struct Ctx {
    /// Edgegap API client configuration (an autogenerated struct)
    pub api_config: Configuration,
    /// Output format
    pub format: OutputFormat,
    /// Redact long strings in api responses, eg: base64 encoded image fields
    pub pretty_redactions: bool,
    /// Json pointer for rendering specific field
    pub json_pointer: Option<String>,
    /// Patches to apply to the json response
    pub render_patches: Option<Vec<String>>,
    /// Read payload source
    pub payload_source: PayloadSource,
}

impl Ctx {
    /// Gets the Edgegap API client `Configuration`
    pub fn config(&self) -> &Configuration {
        &self.api_config
    }
}

#[derive(Debug)]
pub enum PayloadSource {
    Stdin,
    // File(String),
}

impl Default for Ctx {
    fn default() -> Self {
        Self {
            api_config: edgegap_configuration(),
            format: OutputFormat::Json,
            pretty_redactions: false,
            json_pointer: None,
            render_patches: None,
            payload_source: PayloadSource::Stdin,
        }
    }
}

#[derive(clap::ValueEnum, Debug, Clone, Copy)]
#[clap(rename_all = "kebab_case")]
pub enum OutputFormat {
    Json,
    Text,
}

impl std::fmt::Display for OutputFormat {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            OutputFormat::Json => write!(f, "json"),
            OutputFormat::Text => write!(f, "text"),
        }
    }
}

fn edgegap_configuration() -> Configuration {
    let key =
        std::env::var("EDGEGAP_API_KEY").expect("EDGEGAP_API_KEY environment variable is not set");
    Configuration {
        base_path: "https://api.edgegap.com/".to_string(),
        api_key: Some(ApiKey { prefix: None, key }),
        user_agent: Some("arbctl".to_string()),
        ..Default::default()
    }
}
